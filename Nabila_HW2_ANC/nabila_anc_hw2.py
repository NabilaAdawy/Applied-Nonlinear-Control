# -*- coding: utf-8 -*-
"""Nabila_ANC_HW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rFkrhGfzbwq7IcfQRQfxPYa1Y3WZSwP2

# Problem 1
"""

import numpy as np 
from scipy.integrate import odeint 
from math import *
from matplotlib.pyplot import *

k = 10
def sys_ode(x, t):
    phi, dphi = x[0], x[1]
    ddphi = -np.sign(k*phi+dphi)
    return dphi, ddphi

t0 = 0 
tf = 10 
N = int(1000) 
t = np.linspace(t0, tf, N) 

x0 = [[3,0],[0,0],[-2,0],[-1.3,0],[0.8,0]] # Initial conditions
figure(figsize=(10, 6))

for x_0 in x0:
    x_sol = odeint(sys_ode,x_0, t)
    x, dx = x_sol[:,0], x_sol[:,1] 
    plot(x , dx, linewidth=2.0) 

grid(color='black', linestyle='--', linewidth=1.0, alpha = 0.7)
grid(True)
ylabel(r'dx')
xlabel(r'x')
legend(["phi0=3","phi0=0","phi0=-2","phi0=-1.3","phi0=0.8"])
show()

def phase_portrait(f,x_range,dens):  
    x_range = x_range
    x1_max, x2_max = x_range
    x1_span = np.arange(-1.1*x1_max, 1.1*x1_max, 0.01)
    x2_span = np.arange(-1.1*x2_max, 1.1*x2_max, 0.01)
    x1_grid, x2_grid = np.meshgrid(x1_span, x2_span)
    dx1, dx2 = f([x1_grid, x2_grid], 0)
    strm = streamplot(x1_span, x2_span, dx1, dx2, arrowsize=1.2, density=dens,color=dx2, cmap='winter', linewidth=1, arrowstyle='->')
    colorbar(strm.lines)
    title("Phase Portrait")
    xlim([-x1_max,x1_max])
    ylim([-x2_max,x2_max])
    xlabel("x")
    ylabel("dx")

dens=2
x_range=[3,3]
figure(figsize=(10,6))
phase_portrait(sys_ode,x_range,dens)   
show()

"""# Problem 2"""

def stable_node(x,t):
    phi, dphi = x[0], x[1]
    ddphi = -6*phi-5*dphi
    return dphi, ddphi

#eignvalues plot of the system
re = [-2,-3]
im = [0,0]
figure(figsize=(7,5))
scatter(re,im,c ="red")
title("eigenvalues")
axhline(y = 0, color = 'g', linestyle = '-')
axvline(x = 0, color = 'g', linestyle = '-')
grid(color='black', linestyle='--', linewidth=1.0, alpha = 0.7)
grid(True)
ylabel(r'jω')
xlabel(r'σ')
show()

# Phase Portrait plot
dens=2
x_range=[3,3]
figure(figsize=(10,6))
phase_portrait(stable_node,x_range,dens)
show()

def unstable_node(x,t):
    phi, dphi = x[0], x[1]
    ddphi = -6*phi+5*dphi
    return dphi, ddphi

#eignvalues plot of the system
re = [2,3]
im = [0,0]
figure(figsize=(7,5))
scatter(re,im,c ="red")
title("eigenvalues")
axhline(y = 0, color = 'g', linestyle = '-')
axvline(x = 0, color = 'g', linestyle = '-')
grid(color='black', linestyle='--', linewidth=1.0, alpha = 0.7)
grid(True)
ylabel(r'jω')
xlabel(r'σ')
show()

# Phase Portrait plot  
dens=2
x_range=[3,3]
figure(figsize=(10,6))
phase_portrait(unstable_node,x_range,dens)

def saddle_point(x,t):
    phi, dphi = x[0], x[1]
    ddphi = 4*phi
    return dphi, ddphi

#eignvalues plot of the system
re = [-2,2]
im = [0,0]
figure(figsize=(7,5))
scatter(re,im,c ="red")
title("eigenvalues")
axhline(y = 0, color = 'g', linestyle = '-')
axvline(x = 0, color = 'g', linestyle = '-')
grid(color='black', linestyle='--', linewidth=1.0, alpha = 0.7)
grid(True)
ylabel(r'jω')
xlabel(r'σ')
show()

# Phase Portrait plot  
dens=2
x_range=[3,3]
figure(figsize=(10,6))
phase_portrait(saddle_point,x_range,dens)

def stable_focus(x,t):
    phi, dphi = x[0], x[1]
    ddphi = -5*phi-2*dphi
    return dphi, ddphi

#eignvalues plot of the system
re = [-1,-1]
im = [-2,2]
figure(figsize=(7,5))
scatter(re,im,c ="red")
title("eigenvalues")
axhline(y = 0, color = 'g', linestyle = '-')
axvline(x = 0, color = 'g', linestyle = '-')
grid(color='black', linestyle='--', linewidth=1.0, alpha = 0.7)
grid(True)
ylabel(r'jω')
xlabel(r'σ')
show()

# Phase Portrait plot  
dens=2
x_range=[3,3]
figure(figsize=(10,6))
phase_portrait(stable_focus,x_range,dens)

def unstable_focus(x,t):
    phi, dphi = x[0], x[1]
    ddphi = -5*phi+2*dphi
    return dphi, ddphi
#eignvalues plot of the system
re = [1,1]
im = [-2,2]
figure(figsize=(7,5))
scatter(re,im,c ="red")
title("eigenvalues")
axhline(y = 0, color = 'g', linestyle = '-')
axvline(x = 0, color = 'g', linestyle = '-')
grid(color='black', linestyle='--', linewidth=1.0, alpha = 0.7)
grid(True)
ylabel(r'jω')
xlabel(r'σ')
show()

# Phase Portrait plot     
dens=2
x_range=[3,3]
figure(figsize=(10,6))
phase_portrait(unstable_focus,x_range,dens)

def center_point(x,t):
    phi, dphi = x[0], x[1]
    ddphi = -3*phi
    return dphi, ddphi
#eignvalues plot of the system
re = [0,0]
im = [-sqrt(3),sqrt(3)]
figure(figsize=(7,5))
scatter(re,im,c ="red")
title("eigenvalues")
axhline(y = 0, color = 'g', linestyle = '-')
axvline(x = 0, color = 'g', linestyle = '-')
grid(color='black', linestyle='--', linewidth=1.0, alpha = 0.7)
grid(True)
ylabel(r'jω')
xlabel(r'σ')
show()

# Phase Portrait plot 
dens=2
x_range=[3,3]
figure(figsize=(10,6))
phase_portrait(center_point,x_range,dens)

"""# Problem 3"""

def sys1(x,t):
    x1, x2 = x[0], x[1]
    dx1 = x2 - x1*(x1**2 + x2**2 -1) 
    dx2 = -x1 - x2*(x1**2 + x2**2 -1)
    return dx1, dx2
dens=1
x_range=[3,3]
figure(figsize=(10,6))
phase_portrait(sys1,x_range,dens)

def sys2(x,t):
    x1, x2 = x[0], x[1]
    dx1 = x2 + x1*(x1**2 + x2**2 -1) 
    dx2 = -x1 + x2*(x1**2 + x2**2 -1)
    return dx1, dx2
dens=1
x_range=[3,3]
figure(figsize=(10,6))
phase_portrait(sys2,x_range,dens)

def sys3(x,t):
    x1, x2 = x[0], x[1]
    dx1 = x2 - x1*(x1**2 + x2**2 -1)**2
    dx2 = -x1 - x2*(x1**2 + x2**2 -1)**2
    return dx1, dx2
dens=1
x_range=[3,3]
figure(figsize=(10,6))
phase_portrait(sys3,x_range,dens)

"""# Problem 4

"""

def sys4(x,t):
    x1, x2 = x[0], x[1]
    dx1 = x2
    dx2 = -x2 - np.sin(x1)
    return dx1, dx2
dens=1
x_range=[4,4]
figure(figsize=(10,6))
phase_portrait(sys4,x_range,dens)

"""# Problem 5

• Solving for equlibrium
"""

from sympy import symbols, Matrix, nonlinsolve
from numpy import diag, array
from numpy.linalg import eig
from sympy.physics.mechanics import *
from sympy.utilities.lambdify import lambdify
import math
from matplotlib.pyplot import *

y={}
dy={}
eq_points = []
for i in range(1, 3):
    y[i] = symbols('y' + str(i))
    dy[i] = symbols('dy' + str(i))

# The system dynamics
dy = [y[1]-y[1]**3+2*y[1]*y[2],-y[2]+(1/2)*y[1]*y[2]]

eq_points = nonlinsolve(dy,[y[1],y[2]])
pprint(eq_points)

"""• Calculate the Jacobian Symbolically"""

x = {}
dx = {}

for i in range(1, 3):
    x[i] = dynamicsymbols('x' + str(i))
    dx[i] = dynamicsymbols('dx' + str(i), 1)

x_s = list(x.values())
x_dot = list(dx.values())

# The system dynamics
dx = Matrix([x[1]-x[1]**3+2*x[1]*x[2],-x[2]+(1/2)*x[1]*x[2]])
# Finding the Jacobian
J = dx.jacobian(x_s)
J

"""• Calculate the Numerical Jacobian by substituting with the equilibrium points, then find the eigenvalues of the obtained Matrix A."""

Lambdas=[]
J_num = lambdify([x[1],x[2]], J)
for eq in eq_points:
  x_e = array(eq, dtype='double')
  A = array(J_num(x_e[0],x_e[1]), dtype='double')
  lambdas, Q = eig(A)
  Lambdas.append(lambdas)
  print(f'the matrix A for Equilibrium {x_e} is: \n {A}\n Eigen values:\n {lambdas} \n')

"""• Checking for the stability of each equlibrium point, by analyzing the eigenvalues.


"""

for l in Lambdas:
  if l[0].real < 0 and l[1].real < 0:
    print(f'the system is Asymptotically Stable at the eigenvalues : {l}\n')
  elif l[0].real==0:
    if l[1].real < 0:
      print(f'the system is lypanunov stable at the eigenvalues : {l}\n')
    else:
      print(f'the system is unstable at the eigenvalues : {l}\n')
  elif l[1].real==0:
    if l[0].real < 0:
      print(f'the system is lypanunov stable at the eigenvalues : {l}\n')
    else:
      print(f'the system is unstable at the eigenvalues : {l}\n')
  else: 
    print(f'the system is unstable at the eigenvalues : {l}\n')

"""• Drawing the phase portrait together with stable and unstable points."""

def test_f(x,t):
    x1, x2 = x[0], x[1]
    dx1 = x1-x1**3+2*x1*x2
    dx2 = -x2+0.5*x1*x2
    return dx1, dx2
dens=2
x_range=[3,3]
figure(figsize=(10,6))
for eq in eq_points:
  scatter(eq[0], eq[1])

phase_portrait(test,x_range,dens) 
show()